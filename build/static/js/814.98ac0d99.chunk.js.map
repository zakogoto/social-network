{"version":3,"file":"static/js/814.98ac0d99.chunk.js","mappings":"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","sources":["components/login/Login.jsx","ui/validation/FormsControl.js","ui/validation/validators.js","webpack://react-app-01/./src/ui/validation/FormsControl.module.css?0a8f"],"sourcesContent":["import React from 'react'\r\nimport { reduxForm } from 'redux-form'\r\nimport { Input, createField } from '../../ui/validation/FormsControl'\r\nimport { maxLengthCreator, minLengthCreator, required } from '../../ui/validation/validators'\r\nimport { connect } from 'react-redux'\r\nimport { login } from '../../redux/reducers/authReducer'\r\nimport { Navigate } from 'react-router-dom'\r\nimport styles from '../../ui/validation/FormsControl.module.css'\r\n\r\nconst lengthLimits = { \r\n  login: {\r\n    min: minLengthCreator(3),\r\n    max: maxLengthCreator(20)},\r\n  password: {\r\n    min: minLengthCreator(8),\r\n    max: maxLengthCreator(20)\r\n  },\r\n}\r\n\r\nconst LoginForm = ({handleSubmit, error}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {createField(Input, 'email', 'login', 'email', [required, lengthLimits.login.min, lengthLimits.login.max])}\r\n      {createField(Input, 'password', 'password', 'password', [required, lengthLimits.password.min, lengthLimits.password.max])}\r\n      {createField(Input, 'checkbox', '', 'rememberMe', [], 'Remember Me')}\r\n      {error && <div className={styles.errorMessage}>{error}</div>}\r\n      <div>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({form: 'login'}) (LoginForm)\r\n\r\n\r\nconst Login = ({login, isAuth}) => {\r\n  \r\n  const onSubmit = (formData) => {\r\n    const {email, password, rememberMe} = formData;\r\n    login(email, password, rememberMe)\r\n  }\r\n\r\n  if (isAuth) {\r\n    return <Navigate to={'/profile'} />\r\n  }\r\n\r\n  return (\r\n    <div style={{padding: '20px'}}>\r\n      <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst MapStateToProps = (state) => {\r\n  return {\r\n    isAuth: state.auth.isAuth\r\n  }\r\n}\r\n\r\nexport default connect(MapStateToProps, {login}) (Login)","import React from 'react'\r\nimport styles from './FormsControl.module.css'\r\nimport { Field } from 'redux-form';\r\n\r\nconst Element = (Element) => ({input, meta, ...props}) => {\r\n    // const {input, meta, ...props} = props\r\n    const errorMessage = meta.error && meta.touched;\r\n\r\n    return (\r\n        <div className={errorMessage ? styles.error : styles.formControl}>\r\n            <Element {...input} {...meta} {...props}/>\r\n            {errorMessage && <span className={styles.errorMessage}>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input = Element('input') \r\nexport const Textarea = Element('textarea') \r\n\r\nexport const createField = (component, type, placeholder, name, validators, text='') => {\r\n    return ( \r\n        <div>\r\n            <Field component={component} type={type} placeholder={placeholder} name={name} validate={validators} />\r\n            <span>\r\n                {text}\r\n            </span>\r\n        </div>\r\n    )\r\n}","export const required = ( value) => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (length) => (value) => {\r\n    if (value && value.length > length) return `Max length ${length} symbols`;\r\n    return undefined\r\n}\r\nexport const minLengthCreator = (length) => (value) => {\r\n    if (value && value.length < length) return `Min length ${length} symbols`;\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControl_formControl__EYfDy\",\"error\":\"FormsControl_error__dhOV-\",\"errorMessage\":\"FormsControl_errorMessage__CvuuO\"};"],"names":["lengthLimits","login","min","minLengthCreator","max","maxLengthCreator","password","LoginReduxForm","reduxForm","form","_ref","handleSubmit","error","_jsxs","onSubmit","children","createField","Input","required","_jsx","className","styles","errorMessage","connect","state","isAuth","auth","_ref2","Navigate","to","style","padding","formData","email","rememberMe","Element","input","meta","props","touched","formControl","Textarea","component","type","placeholder","name","validators","text","arguments","length","undefined","Field","validate","value","concat"],"sourceRoot":""}